name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        c_compiler: [gcc, clang]
        cpp_compiler: [g++, clang++]
        exclude:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: clang++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: g++
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Cache CMake Build
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}/build
        key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: ${{ runner.os }}-cmake-

    # (Rest of your steps)

    - name: Set reusable strings (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: echo "BUILD_OUTPUT_DIR=${{ github.workspace }}/build" | Out-File -Append -FilePath $Env:GITHUB_ENV

    - name: Set reusable strings (Linux)
      if: matrix.os != 'windows-latest'
      run: echo "BUILD_OUTPUT_DIR=${{ github.workspace }}/build" >> $GITHUB_ENV

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y <list-your-dependencies-here>

    - name: Set up compilers (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        choco install mingw -y
        echo "CC=gcc" | Out-File -Append -FilePath $Env:GITHUB_ENV
        echo "CXX=g++" | Out-File -Append -FilePath $Env:GITHUB_ENV

    # (Rest of your steps)

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cmake -B ${{ env.BUILD_OUTPUT_DIR }} `
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} `
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} `
        -DCMAKE_BUILD_TYPE=Debug `
        -S ${{ github.workspace }}

    - name: Configure CMake (Linux)
      if: matrix.os != 'windows-latest'
      run: |
        cmake -B ${{ env.BUILD_OUTPUT_DIR }} \
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=Debug \
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ env.BUILD_OUTPUT_DIR }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ env.BUILD_OUTPUT_DIR }}
      run: ctest --build-config ${{ matrix.build_type }}