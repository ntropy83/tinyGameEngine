name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu with gcc
          - os: ubuntu-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
          # Ubuntu with clang
          - os: ubuntu-latest
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++
          # Windows with MinGW
          - os: windows-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Cache CMake Build
      uses: actions/cache@v2
      with:
        path: |
          ${{ github.workspace }}/build
          ~/.ccache  # if you use ccache, cache this directory
        key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: |
          ${{ runner.os }}-cmake-

    - name: Cache Apt Packages
      if: runner.os == 'Linux'
      uses: actions/cache@v2
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-${{ hashFiles('**/apt-packages.txt') }} # You need to create a file listing the packages
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install Qt
      uses: jurplel/install-qt-action@v3

    - name: Prepare Vulkan SDK
      uses: humbletim/setup-vulkan-sdk@v1.2.0
      with:
        vulkan-query-version: 1.3.204.0
        vulkan-components: Vulkan-Headers, Vulkan-Loader
        vulkan-use-cache: true

    - name: Install dependencies on Ubuntu
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxxf86vm-dev libxi-dev libxrandr-dev libxinerama-dev libxcursor-dev mesa-common-dev

    - name: Set up MinGW on Windows
      if: runner.os == 'Windows'
      run: |
        choco install mingw -y
        echo "CC=${{ matrix.c_compiler }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.cpp_compiler }}" >> $GITHUB_ENV

    - name: Set Vulkan SDK environment variable
      if: runner.os == 'Windows'
      run: |
        echo "VULKAN_SDK=${{ env.VULKAN_SDK }}" >> $GITHUB_ENV

    - name: Configure CMake
      run: |
        cmake -B ${{ github.workspace }}/build \
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: ctest --build-config ${{ matrix.build_type }}